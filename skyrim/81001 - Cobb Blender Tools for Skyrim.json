{
  "modId": 81001.0,
  "modName": "Cobb Blender Tools for Skyrim",
  "summary": "Scripts, add-ons, and other doodads I&#39;ve created to automate various tasks in Blender.\r<br />\r<br />Files are provided as is.",
  "descriptionHtml": "[color=#DDCCBB][size=5][b]Cobb Blender Tools for Skyrim[/b][/size][/color]\r<br />This is a collection of scripts, add-ons, and other doodads I&#39;ve created to help me with various tasks in Blender. Files are provided as-is.\r<br />\r<br />I&#39;m currently using Blender 2.78, so that&#39;s what everything current will have been written for and tested on unless otherwise stated (there&#39;s some 2.49b stuff).\r<br />\r<br />[color=#DDCCBB][size=4][b]Import CK Prefab[/b][/size][/color]\r<br />The Creation Kit can be used to export a list of selected references in a cell, as a text file. This file contains the references&#39; editor IDs, positions, rotations, and scales. The [i]Import CK Prefab[/i] add-on can load these files and reconstruct arrangements of references (i.e. &#34;prefabs&#34;) in Blender. This is most useful when dealing with architectural kits, when you need to take large structures built from disparate pieces and convert them to single objects.\r<br />\r<br />Before you can import these files, you need a &#34;palette folder,&#34; which will contain the relevant 3D models converted from NIFs to BLENDs (literally just import them and save them). The BLEND files need to be named after the editor IDs of your references (typically the same as the base form). When importing, be sure to specify the location of this palette folder in the options in the left pane, and keep in mind that subfolders will not be searched. Assuming default settings, any missing files will result in the creation of empty objects named &#34;MISSING - Editor ID,&#34; which will still be positioned appropriately; you can always set up the missing blend later, and then paste its contents as a child node of the empty object to fit it right into position.\r<br />\r<br />When you import, your prefab will be doubly-nested under two empties: Origin and Root. To realign your entire prefab on the origin, pick an imported model to serve as your center. Set Root&#39;s position to the negation of your center object&#39;s position, and set Origin&#39;s yaw-rotation to the negation of your center object&#39;s yaw. (The &#34;clumsily recenter&#34; import option does something like this for you, using the average of all positions and using the first non-zero yaw rotation it finds; this is useful just so you don&#39;t need to whisk the camera miles away from the model origin. You&#39;ll still want recenter the prefab by hand in order to get things exact.)\r<br />\r<br />[b]Recommended workflow:[/b] create BLEND files for all of your meshes; then, use NifUtilsSuite to extract the collisions as NIFs, and save those in your palette folder with the naming convention [i]editorID.collision.blend[/i]. Then, use two import operations: the first with default settings; the second using &#34;.collision&#34; as your filename suffix. You will then have the visible and compressed-collision geometry all in one file.\r<br />\r<br />[b]Known issue:[/b] If the top-level objects in a palette blend have transforms on them, those transforms will get blown away when the importer attempts to place those objects at the coordinates dictated by your CK text file. To work around this, modify your palette blend: create a new Empty and nest the transformed objects under it (alternatively, just apply the transforms).\r<br />\r<br />[color=#DDCCBB][size=4][b]Loose Scripts[/b][/size][/color]\r<br />To execute these, create a Text Editor window. Create a new Text if Blender hasn&#39;t for you. Paste the script in and click the &#34;Run Script&#34; button. Bear in mind that text data created in this window will be saved into your blend; it shouldn&#39;t cause problems, but it&#39;s something to be aware of if you&#39;d prefer to manually remove cruft.\r<br />\r<br />[color=#efe9e3][b]Merge identical materials[/b][/color]\r<br />Scans all materials in your current blend file and merges any that have identical properties. Nested data structures are not checked; only scalar and array values. This means that the script is not foolproof and can yield false positives; however, it should work fine for imported vanilla meshes. In tests, it was able to distinguish between materials in Soul Cairn meshes that used identical textures but subtly different values.\r<br />\r<br />[color=#efe9e3][b]Remove unused materials and textures[/b][/color]\r<br />If you leave materials and textures unused after importing them, Blender will happily continue to save them into your file again and again, forever. This script will scrub them out for you. For best results, run this after &#34;merge identical materials&#34; to clean up any textures that were left behind.\r<br />\r<br />[color=#efe9e3][b]Copy vertex group by UV [B2.49b][/b][/color]\r<br />Given a source mesh and a target mesh whose coinciding vertices have identical or near-identical UVs, copies one or more vertex groups from the source mesh to the target mesh. Uses UVs rather than indices to match vertices together: the two meshes don&#39;t need to have the same vertex order, but the matching pre-process is very, very slow.\r<br />\r<br />My use case was when improperly importing body meshes (such that the dismember partitions were ruined) and editing them. I didn&#39;t want to have to redo my edits from scratch, so I just imported the originals properly and used this tool to copy the vertex groups to my edited meshes. Speaking of, a tip: the Blender 2.49b NIF scripts only understand Fallout 3 skin partition names, so you have to rename back and forth between those in NifSkope to import properly; you don&#39;t have to choose names that make sense, so feel free to map Skyrim&#39;s &#34;calves&#34; partition to Fallout 3&#39;s &#34;brain&#34; partition if that&#39;s particularly memorable to you.\r<br />\r<br />[color=#efe9e3][b]Reorder vertices based on template with matching UVs [B2.49b][/b][/color]\r<br />Given a subject mesh (whose vertices you wish to reorder) and a template mesh (whose vertex order you wish to copy), creates an output mesh (by copying the template mesh) and copies data (vertex groups, armature data, etc.) from matching vertices in the subject mesh. Uses UVs to match vertices together; note that the matching pre-process is very, very slow.\r<br />\r<br />Primary use case is when you&#39;re working with body/armor meshes, and the vertex orders between your _0 and _1 meshes don&#39;t match up for some reason. If they have identical UV mapping, this script should be able to fix your vertex ordering with minimal hassle (provided you&#39;re willing to wait on the pre-process step).\r<br />\r<br />[color=#DDCCBB][size=5][b]FAQ: Frequently Assumed Questions[/b][/size]\r<br />[size=2][b](because &#34;FAQ&#34; sections are usually just a means of deflecting the questions we [i]assume[/i] you&#39;ll ask)[/b][/size]\r<br />[b][size=1](tampering with acronyms is the pinnacle of wit; please shower me with adulation now)[/size][/b][/color]\r<br />\r<br />[b]Your loose scripts crash Blender.[/b]\r<br />If they don&#39;t crash [i]every single time you run them[/i], then it&#39;s just Blender being Blender. Unless Python is supposed to use manual memory management and nobody told me, it seems that Blender will just up and crash for no reason even if the script is written properly, so save early and often when you&#39;re using these to make mods for Skyrim. It&#39;s just like [i]playing[/i] the game&#33; :P\r<br />\r<br />[b]Can you make these for 2.49?[/b]\r<br />I don&#39;t plan on converting any scripts to any version of Blender that I don&#39;t use them on, sorry. These can be very time-consuming to write, test, and bug-proof: the &#34;reorder vertices&#34; script for Blender 2.49b took over [i]six straight hours[/i] of work, which wasn&#39;t helped by how long it took the script to crunch all the data it needed [i]every time[/i] I needed to re-test it&#33;",
  "categoryId": "39",
  "version": "1.1",
  "author": "DavidJCobb",
  "createdUnix": "1482299320",
  "updatedUnix": "1492832484",
  "containsAdultContent": false,
  "uploadedBy": "DavidJCobb",
  "primaryFile": null,
  "files": [
    {
      "fileId": "1000231525",
      "name": "Import CK Prefab",
      "version": "1.0",
      "categoryId": "1",
      "categoryName": "MAIN",
      "isPrimary": false,
      "size": "3",
      "fileName": "Import CK Prefab-81001-1-0.rar",
      "uploadedUnix": "1482298659",
      "modVersion": "1.0",
      "virusScanUrl": "https://www.virustotal.com/file/c9a90beccbabd0b1c733313ed4ff5a6941064ce2a9fe16be73c1ada98ebc8f7e/analysis/1482298682/",
      "changelogHtml": null,
      "cdnName": "Nexus Global Content Delivery Network",
      "downloadUrl": "https://filedelivery.nexusmods.com/110/Import%20CK%20Prefab-81001-1-0.rar?fid=1000231525&ttl=1535869633&ri=8192&rs=8192&setec=9ad47fb9a95d69493cd9b9d4b606a26b"
    },
    {
      "fileId": "1000242407",
      "name": "Loose scripts",
      "version": "1.1",
      "categoryId": "1",
      "categoryName": "MAIN",
      "isPrimary": false,
      "size": "8",
      "fileName": "Loose scripts-81001-1-1.rar",
      "uploadedUnix": "1492832484",
      "modVersion": "1.1",
      "virusScanUrl": "https://www.virustotal.com/file/f82030cefb1847c4e03ab671e3433020aaa40b9809a11821e829953c978cac4b/analysis/1492832822/",
      "changelogHtml": null,
      "cdnName": "Nexus Global Content Delivery Network",
      "downloadUrl": "https://filedelivery.nexusmods.com/110/Loose%20scripts-81001-1-1.rar?fid=1000242407&ttl=1535869634&ri=8192&rs=8192&setec=7b9f23fbb0daf9b6c855267a2b76b528"
    }
  ]
}