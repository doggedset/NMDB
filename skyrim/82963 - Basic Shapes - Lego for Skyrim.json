{
  "modId": 82963.0,
  "modName": "Basic Shapes - Lego for Skyrim",
  "summary": "A collection of simple shapes meant to make it easier for modders to create new, novel objects. ",
  "descriptionHtml": "This is a collection of &#34;basic  shapes&#34; that I frequently use when I build homes. Most of them are lifted from vanilla, but some are borrowed from releases from Stroti and Oaristys. \r<br />\r<br />My folders run pretty deep, so it&#39;s definitely possible that a mesh I have included in this download has not been properly attributed. If you recognize an individual part that I have not attributed, please send me a PM so I can fix it, and, of course, to remove the mesh in question if you are so inclined.\r<br />\r<br /> This is a collection put together with the spirit of creativity and sharing. I feel it is important to preface this disclaimer since I am, after 5+ years of modding, not entirely sure where every bit of mesh-models originally come from. \r<br />\r<br />[size=5]\r<br />[color=#d5a6bd]General Idea [/color][/size]\r<br />\r<br />I often try to create new, novel objects, but since I do not know how to manifest my ideas in a 3D-program, I have so far relied on simply mashing together static meshes. This has resulted in me having a pretty substantial library of &#34;basic shapes&#34;, that I treat as a box of Lego-pieces. In this collection I have tried to sample a wide variety of basic shapes that could be of interest to anyone building homes, or for those who just enjoy creating new clutter-items from scratch. \r<br />\r<br />If you are familiar with my mods, you will certainly see variants of  these basic shapes strewn all over the house mods I have already published. A major reason that I enjoy modding is the challenge of whether or not I can manifest an idea for an item within the limits of (mostly) vanilla assets. I hope these &#34;basic shapes&#34; will inspire others to think outside the box, and be able to break down the design they have in mind into simple, discrete shapes. \r<br />\r<br />Some of the objects in this file are duplicates of the same mesh, but uses different vanilla textures. This is to illustrate how dramatically you can change the appearance of a basic shape simply by changing the texture and normal map of the object.\r<br />\r<br /> I have also included a few vanilla resources (specifically, a dwemer lens and dwemer piping) that, in this incarnation, appear as transparent glass. This is done both as an example of the variety that can be achieved by changing a few settings, but also to serve as a &#34;blueprint&#34; for turning just about any object in the game into a glass structure (and which has been thoroughly tested  in-game to react well with vanilla light-sources)\r<br />\r<br />\r<br />\r<br />[color=#d5a6bd][size=5]Tips and Tricks: UV-Texture Editing and Vertex Color Manipulation [/size][/color]\r<br />\r<br />Two major &#34;tricks&#34; that I have learnt when working with clutter in nifskope is UV-texture-mapping and Vertex Color. UV-texture is accessed by right-clicking on a mesh and selecting Texture -&gt; Edit UV. Here you can see exactly how the mesh in question is mapping the texture you have chosen. You can select parts, or all of the &#34;bits&#34; of  the UV-mapping and move them around to create entirely new looks.\r<br />\r<br /> A good texture to start playing around with is &#34;Dwepottery01&#34;. There are several vanilla textures that are laid out in a similar fashion (glazedpottery02 and katariahClutter01 are other examples), and if you&#39;re making your own textures, I highly suggest this basic layout simply because so many vanilla items map very well with this basic design.\r<br />\r<br /> When you start exploring just how meshes are mapped onto  their own textures, you will no doubt see a wide variety of &#34;solutions&#34;. Some meshes will be very neat, in the sense that each part of the mesh is isolated to its own separate square. Other meshes - primarily those converted from other games and/or resources - can be extremely complicated in their layout, often having each individual pieces piled on top of each other. What you can do here, is maximize the render window, zoom in, and move each point of the UV-mapping a few degrees off their original location. \r<br />\r<br />Once separated (and moved), you can straighten the lines you&#39;ve messed with. The grid-pattern in nifskope is a good guide, since UV-mapping seems to be very sensitive to angles that aren&#39;t laid out in a 90 degree angle (you&#39;ll end up with blurry parts if you deviate too much from a symmetrical layout). \r<br />\r<br />As you will no doubt experience, it is often a judgement-call you have to make whether or not a particular mesh is worth the trouble to &#34;untangle&#34; in this manner. I&#39;ve &#34;cleaned&#34; meshes that have taken more than 2 hours of painfully tedious fiddling, but they ended up looking great. I have also spent countless hours fiddling with a UV-mapping and (rightfully) given up due to how complex the mapping happened to be. \r<br />\r<br />Playing around with UV-mapping can be very  rewarding, because it can often allow you to make use of vanilla resources in a new and unexpected  way. You can, for example, turn the sleeves of a shirt from linen/cotton into leather scraps with seams simply by swapping the default texture with the one from the bandit folder in clothes.\r<br />\r<br /> And when doing this, don&#39;t be blinded by the conventions of the M and F folders. While they may be similar, there is often a pretty significant difference in the way male and female textures are constructed. For example, I often use the female variant of farmclothes01 because the skirt provides a big section of unbroken fabric, which can be mapped onto a pillow. Similarly, &#34;farmcloth02body1024&#34; is a good source for leather. \r<br />\r<br />Another possibility with manipulating UV-mapping is turning a mesh with a muddy texture into a very sharp one. The textures that work best here are seamless textures. For metal, good sources are metalwork01 in dungeon and shinymetallight01/shinymetaldark01 in DlC01 clutter, as well as dwemetaltiles03 in dungeon-dwemerruins. There are a wide variety of wood sources in vanilla, where most of the floor/plank textures work very well as seamless textures. \r<br />\r<br />The way you use seamless textures in UV mapping is simply by selecting the shape (or all of the shapes) in the UV editor, right click one of the points highlighted in yellow, and hit &#34;Scale and translate Selected&#34;. Here you can resize the shape in question, either with uniform scaling along the X and Y axis, or just with one axis, which is sometimes useful when the original mapping doesn&#39;t make use of the full texture in either dimension. \r<br />\r<br />Another good trick is manipulating Vertex colors. A lot of the meshes that I have packed into this file are open for vertex color manipulation, but it&#39;s pretty easy to &#34;convert&#34; any mesh into a vertex color-friendly state. Open the mesh in question, go to BSLightingShaderproperty, and look at Shader Flags 2. Hit the drop-down menu and tick &#34;SLSF2_Vertex_Colors&#34; (nifskope sometimes crashes when doing this, so keep frequent saved copies of your work). \r<br />\r<br />What will probably happen now, is that the object in question turns completely black. Navigate to NiTriShapeData, and scroll down to &#34;Has Vertex Colors&#34;. If this section is marked as &#34;no&#34;, double-click on it, and it will turn into &#34;yes&#34;. Click the &#34;refresh-symbol&#34; below, in the &#34;Vertex color&#34; field. You can now right-click the vertex color field and go into color -&gt; Set All. Using the color-wheel, you can drastically change the appearance of any mesh; from very dramatic colors, to very subtle shifts in tone. \r<br />\r<br />A lot of vanilla resources uses this method to generate new variants using the same basic texture. For modders, you can use a beige or black-and-white texture and generate a ton of different individual color variations simply by manipulating the Vertex Color values. I frequently use this method when I build homes to give pillows, blankets, furs and other textures a multitude of different looks, all using the same texture, basic texture. \r<br />\r<br />And if you&#39;re making textures from scratch, you&#39;d be smart to work  with a HD resolution, seamless texture that you shrink down to 512 x 512, and then scale up within each individual mesh (and color it, if you want to). This is an example of UV-mapping and Vertex Coloring working together to make your mod leaner and less resource-hungry in terms of HD space, which is particularly important if you&#39;re interested in porting your mod to xbox, where file space is a serious consideration. \r<br />\r<br />And even if you don&#39;t, it&#39;s a good design-challenge to try to make the most of the smallest amount of resources available. Hopefully this mini-guide will inspire this kind of thinking, which I feel is key to coming up with novel and interesting solutions. Limitations breed ingenuity, and new, interesting solutions. \r<br />\r<br />Have fun&#33;",
  "categoryId": "82",
  "version": "1.0",
  "author": "Jasper",
  "createdUnix": "1490535622",
  "updatedUnix": "1490535601",
  "containsAdultContent": false,
  "uploadedBy": "jasperthegnome",
  "primaryFile": null,
  "files": [
    {
      "fileId": "1000240039",
      "name": "Basic Shapes V.1.0",
      "version": "1.0",
      "categoryId": "1",
      "categoryName": "MAIN",
      "isPrimary": false,
      "size": "372",
      "fileName": "Basic Shapes V.1.0-82963-1-0.7z",
      "uploadedUnix": "1490535601",
      "modVersion": "1.0",
      "virusScanUrl": "https://www.virustotal.com/file/4c0acaed0134bcf009b0fbeb420e289e153e97dbf39aa5a65f372efd9d192588/analysis/1490535732/",
      "changelogHtml": null,
      "cdnName": "Nexus Global Content Delivery Network",
      "downloadUrl": "https://filedelivery.nexusmods.com/110/Basic%20Shapes%20V.1.0-82963-1-0.7z?fid=1000240039&ttl=1535871780&ri=8192&rs=8192&setec=b27026cdb7bb93c38f196f4f6b7395ce"
    }
  ]
}